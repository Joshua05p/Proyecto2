/****************************************/
// Encabezado (Libraries)
/*
 * Proyecto2.c
 *
 * Created: 27/04/2025 11:25:38
 * Author : perez
 */

 
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/eeprom.h>
#include "Proyecto2.h"

/****************************************/
// Function prototypes

uint16_t valor_servo1 = 0;
uint16_t valor_servo2 = 0;
uint16_t valor_servo3 = 0;
uint16_t valor_servo4 = 0;
uint8_t  canal_actual = 3;
uint8_t  modo		  = 1;
uint16_t EEMEM eeprom_valor1;
uint16_t EEMEM eeprom_valor2;
uint16_t EEMEM eeprom_valor3;
uint16_t EEMEM eeprom_valor4;
/////////////////////////////
uint16_t EEMEM eeprom_valor1_1;
uint16_t EEMEM eeprom_valor2_1;
uint16_t EEMEM eeprom_valor3_1;
uint16_t EEMEM eeprom_valor4_1;
/////////////////////////////
uint16_t EEMEM eeprom_valor1_2;
uint16_t EEMEM eeprom_valor2_2;
uint16_t EEMEM eeprom_valor3_2;
uint16_t EEMEM eeprom_valor4_2;
/////////////////////////////
uint16_t EEMEM eeprom_valor1_3;
uint16_t EEMEM eeprom_valor2_3;
uint16_t EEMEM eeprom_valor3_3;
uint16_t EEMEM eeprom_valor4_3;
uint8_t posicion_servos = 1;
/****************************************/
// Main Function

int main(void)
{
       salidas();
	   confi_timer0();
	   confi_timer1();
	   confi_timer2();
	   iniciar_USART(51);
       iniciar_adc();
       iniciar_conversion();
       while (1)
       {
			if (posicion_servos == 1){
				PORTD &= ~(1<<PORTD7);
				PORTB &= ~(1<<PORTD4);
			}else if (posicion_servos == 2){
				PORTD |= (1<<PORTD7);
				PORTB &= ~(1<<PORTD4);
			}else if (posicion_servos == 3){
				PORTD &= ~(1<<PORTD7);
				PORTB |= (1<<PORTD4);
			}else if (posicion_servos == 4){
				PORTD |= (1<<PORTD7);
				PORTB |= (1<<PORTD4);
			}
}
}
/****************************************/
// NON-Interrupt subroutines

/****************************************/
// Interrupt routines

ISR(ADC_vect)
{ 
	if (modo == 1){
		
       if(canal_actual == 3)
	   {
            ADMUX |= (1<<MUX2);          //cambia al canal 4
            ADMUX &= ~(1<<MUX0);
			ADMUX &= ~(1<<MUX1);
            canal_actual = 4;
			valor_servo1 = ADC;
			servo1(4 + ((valor_servo1) * 15) / 1023);

        }else if (canal_actual == 4)
		{
            ADMUX |= (1<<MUX2) | (1<<MUX0);           //cambia al canal 5
			ADMUX &= ~(1<<MUX1);
			canal_actual = 5;
			valor_servo2 = ADC;
			servo2(4 + ((valor_servo2) * 15) / 1023);

       }else if(canal_actual == 5)
	   {
			ADMUX |= (1<<MUX2) | (1<<MUX1);          //cambia al canal 6
			ADMUX &= ~(1<<MUX0);
			canal_actual = 6;
			valor_servo3 = ADC;

		    servo3(4 + ((valor_servo3) * 15) / 1023);

       }else if(canal_actual == 6)
	   {
			ADMUX |= (1<<MUX0) | (1<<MUX1);          //cambia al canal 3
			ADMUX &= ~(1<<MUX2);
			canal_actual = 3;
			valor_servo4 = ADC;
			servo4(4 + ((valor_servo4) * 15) / 1023);	   
		   
	   }
}
       iniciar_conversion();

}

ISR(PCINT2_vect) {
	if (!(PIND & (1 << PIND7))){
		if (modo == 1){
		posicion_servos++;
		if(posicion_servos == 5){
			posicion_servos = 1;
		}	
		}
		if (modo == 2){
		posicion_servos++;
		if(posicion_servos == 5){
		posicion_servos = 1;
		}
		switch(posicion_servos){
		case (1):
			valor_servo1 = eeprom_read_word(&eeprom_valor1);
			valor_servo2 = eeprom_read_word(&eeprom_valor2);
			valor_servo3 = eeprom_read_word(&eeprom_valor3);
			valor_servo4 = eeprom_read_word(&eeprom_valor4);
			break;
		case (2):
			valor_servo1 = eeprom_read_word(&eeprom_valor1_1);
			valor_servo2 = eeprom_read_word(&eeprom_valor2_1);
			valor_servo3 = eeprom_read_word(&eeprom_valor3_1);
			valor_servo4 = eeprom_read_word(&eeprom_valor4_1);
			break;
		case (3):
			valor_servo1 = eeprom_read_word(&eeprom_valor1_2);
			valor_servo2 = eeprom_read_word(&eeprom_valor2_2);
			valor_servo3 = eeprom_read_word(&eeprom_valor3_2);
			valor_servo4 = eeprom_read_word(&eeprom_valor4_2);
			break;
		case (4):
			valor_servo1 = eeprom_read_word(&eeprom_valor1_3);
			valor_servo2 = eeprom_read_word(&eeprom_valor2_3);
			valor_servo3 = eeprom_read_word(&eeprom_valor3_3);
			valor_servo4 = eeprom_read_word(&eeprom_valor4_3);
			break;
		
	}
	///////////////////////////////////
	servo1(4 + ((valor_servo1) * 15) / 1023);
	///////////////////////////////////
	servo2(4 + ((valor_servo2) * 15) / 1023);
	///////////////////////////////////
	servo3(4 + ((valor_servo3) * 15) / 1023);
	///////////////////////////////////
	servo4(4 + ((valor_servo4) * 15) / 1023);
		}
		
	}
	if (!(PIND & (1 << PIND2))) {
		if (modo == 1 ){
		//Funcion para guardar
		eeprom_update_word(&eeprom_valor1, valor_servo1);
		eeprom_update_word(&eeprom_valor2, valor_servo2);
		eeprom_update_word(&eeprom_valor3, valor_servo3);
		eeprom_update_word(&eeprom_valor4, valor_servo4);
		
		}
		if (modo == 2){
			posicion_servos++;
			if(posicion_servos == 5){
				posicion_servos = 1;
			}
			switch(posicion_servos){
				case (1):
				eeprom_update_word(&eeprom_valor1, valor_servo1);
				eeprom_update_word(&eeprom_valor2, valor_servo2);
				eeprom_update_word(&eeprom_valor3, valor_servo3);
				eeprom_update_word(&eeprom_valor4, valor_servo4);
				break;
				case (2):
				eeprom_update_word(&eeprom_valor1_1, valor_servo1);
				eeprom_update_word(&eeprom_valor2_1, valor_servo2);
				eeprom_update_word(&eeprom_valor3_1, valor_servo3);
				eeprom_update_word(&eeprom_valor4_1, valor_servo4);
				break;
				case (3):
				eeprom_update_word(&eeprom_valor1_2, valor_servo1);
				eeprom_update_word(&eeprom_valor2_2, valor_servo2);
				eeprom_update_word(&eeprom_valor3_2, valor_servo3);
				eeprom_update_word(&eeprom_valor4_2, valor_servo4);
				break;
				case (4):
				eeprom_update_word(&eeprom_valor1_3, valor_servo1);
				eeprom_update_word(&eeprom_valor2_3, valor_servo2);
				eeprom_update_word(&eeprom_valor3_3, valor_servo3);
				eeprom_update_word(&eeprom_valor4_3, valor_servo4);
				break;
		
			}
			///////////////////////////////////
			servo1(4 + ((valor_servo1) * 15) / 1023);
			///////////////////////////////////
			servo2(4 + ((valor_servo2) * 15) / 1023);
			///////////////////////////////////
			servo3(4 + ((valor_servo3) * 15) / 1023);
			///////////////////////////////////
			servo4(4 + ((valor_servo4) * 15) / 1023);
		}
}
	if (!(PIND & (1 << PIND4))) {
		modo++;
		if(modo == 4){
			modo = 1;
		}
		
		
		if (modo == 1){
			PORTD |= (1<<PORTD6);
			PORTB &= ~(1<<PORTB3);
			PORTB &= ~(1<<PORTB0);
		}else if (modo == 2){
			posicion_servos = 1;
			valor_servo1 = eeprom_read_word(&eeprom_valor1);
			valor_servo2 = eeprom_read_word(&eeprom_valor2);
			valor_servo3 = eeprom_read_word(&eeprom_valor3);
			valor_servo4 = eeprom_read_word(&eeprom_valor4);
			
		   ///////////////////////////////////
		       servo1(4 + ((valor_servo1) * 15) / 1023);
		   ///////////////////////////////////
		       servo2(4 + ((valor_servo2) * 15) / 1023);
		   ///////////////////////////////////
		       servo3(4 + ((valor_servo3) * 15) / 1023);
		   ///////////////////////////////////
		       servo4(4 + ((valor_servo4) * 15) / 1023);
	
	       
			PORTD &= ~(1<<PORTD6);
			PORTB |= (1<<PORTB0);
			PORTB &= ~(1<<PORTB3);
		}else if (modo == 3){
			PORTB &= ~(1<<PORTB0);
			PORTD &= ~(1<<PORTD6);
			PORTB |= (1<<PORTB3);
		}
	}
}
